name: Test & Release
on:
  push:
    branches:
      - develop
      - main
  pull_request: null

jobs:
  tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    if: contains(toJson(github.event.commits.*.message), '[skip ci]') == false || github.ref == 'refs/heads/main'
    strategy:
      matrix:
        node: [12.x, 14.x, 16.x]
    steps:
      - name: ☁️ Checkout Project
        uses: actions/checkout@v3
      - name: 🔧 Setup node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
      - name: 📦 Install up to date npm
        run: sudo npm i -g npm
      - name: 📦 Install dependencies
        run: npm ci
      - name: ⏳ Run tests
        run: npm run test

  license-checker:
    name: License Checker
    runs-on: ubuntu-latest
    if: contains(toJson(github.event.commits.*.message), '[skip ci]') == false || github.ref == 'refs/heads/main'
    steps:
      - name: ☁️ Checkout Project
        uses: actions/checkout@v3
      - name: 🔧 Setup node.js
        uses: actions/setup-node@v3
        with:
          cache: 'npm'
      - name: 📦 Install up to date npm
        run: sudo npm i -g npm
      - name: 📦 Install dependencies
        run: npm ci
      - name: 🕵️‍♀️ Run license checker
        run: npm run license-check

  lint:
    name: Lint
    runs-on: ubuntu-latest
    if: contains(toJson(github.event.commits.*.message), '[skip ci]') == false || github.ref == 'refs/heads/main'
    steps:
      - name: ☁️ Checkout Project
        uses: actions/checkout@v3
      - name: 🔧 Setup node.js
        uses: actions/setup-node@v3
        with:
          cache: 'npm'
      - name: 📦 Install up to date npm
        run: sudo npm i -g npm
      - name: 📦 Install dependencies
        run: npm ci
      - name: 🔍 Run linter
        run: npm run lint

  docker-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    env:
      PUSH_TO_DOCKERHUB: ${{ (github.repository != 'sebbo2002/js-template') && (secrets.DOCKERHUB_TOKEN != null) }}
    steps:
      - name: ☁️ Checkout
        uses: actions/checkout@v3
      - name: 🔧 Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: 🔧 Set up Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: 🔐 Login to DockerHub
        uses: docker/login-action@v1
        if: ${{ env.PUSH_TO_DOCKERHUB == 'true' }}
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: ℹ️ Set Build Variables
        id: buildVars
        run: echo "::set-output name=date::$(date +'%Y-%m-%d %H:%M:%S')"
      - name: 🪄 Build and push (1/2)
        uses: docker/build-push-action@v2
        with:
          context: .
          github-token: ${{ secrets.GH_TOKEN }}
          target: build-container
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64
          pull: true
          push: true
          tags: ghcr.io/${{ github.repository }}:build-container-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: 🪄 Build and push (2/2)
        id: build
        uses: docker/build-push-action@v2
        with:
          context: .
          github-token: ${{ secrets.GH_TOKEN }}
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64
          pull: true
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ github.sha }}
          labels: |
            org.opencontainers.image.authors=${{ github.repository_owner }}
            org.opencontainers.image.created=${{ steps.buildVars.outputs.date }}
            org.opencontainers.image.ref.name=${{ github.ref }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
          cache-from: |
            type=gha
            type=registry,ref=ghcr.io/${{ github.repository }}:build-container-${{ github.sha }}
            type=registry,ref=ghcr.io/${{ github.repository }}:next
            type=registry,ref=ghcr.io/${{ github.repository }}:latest
          cache-to: type=gha,mode=max
      - name: 🔄 Push container to DockerHub
        if: ${{ env.PUSH_TO_DOCKERHUB == 'true' }}
        run: |
          docker pull $SOURCE
          docker tag $SOURCE $TARGET
          docker push $TARGET
        env:
          SOURCE: ghcr.io/${{ github.repository }}:${{ github.sha }}
          TARGET: ${{ github.repository }}:${{ github.sha }}
    outputs:
      digest: ${{ steps.build.outputs.digest }}

  release:
    name: Release
    runs-on: ubuntu-latest
    concurrency: release
    env:
      PUSH_TO_DOCKERHUB: ${{ (github.repository != 'sebbo2002/js-template') && (secrets.DOCKERHUB_TOKEN != null) }}
    needs:
      - tests
      - license-checker
      - lint
      - docker-image
    if: ${{ github.repository != 'sebbo2002/js-template' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') }}
    steps:
      - name: ☁️ Checkout Project
        uses: actions/checkout@v3
      - name: 🔧 Setup node.js
        uses: actions/setup-node@v3
        with:
          cache: 'npm'

          node-version: ${{ matrix.node }}
      - name: 📦 Install up to date npm
        run: sudo npm i -g npm
      - name: 📦 Install dependencies
        run: npm ci
      - name: 📂 Create docs folder
        run: mkdir ./docs
      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: 🔐 Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: ⬇️ Pull GitHub Containers
        id: github
        run: |
          docker pull "${IMAGE}@${DIGEST}"
          echo "::set-output name=image::${IMAGE}@${DIGEST}"
        env:
          IMAGE: ghcr.io/${{ github.repository }}
          DIGEST: ${{ needs.docker-image.outputs.digest }}
      - name: ⬇️ Pull Docker Hub Containers
        if: ${{ env.PUSH_TO_DOCKERHUB == 'true' }}
        id: dockerhub
        run: |
          docker pull "${IMAGE}@${DIGEST}"
          echo "::set-output name=image::${IMAGE}@${DIGEST}"
        env:
          IMAGE: ${{ github.repository }}
          DIGEST: ${{ needs.docker-image.outputs.digest }}
      - name: 🪄 Run semantic-release
        run: BRANCH=${GITHUB_REF#refs/heads/} npx semantic-release
        env:
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GH_OWNER: ${{ github.repository_owner }}
          GITHUB_NPM_CONFIG_REGISTRY: https://npm.pkg.github.com/
          GITHUB_NPM_TOKEN: ${{ secrets.GH_TOKEN }}
          PUBLIC_NPM_CONFIG_REGISTRY: https://registry.npmjs.org
          PUBLIC_NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          DOCKER_LOCAL_IMAGE_GH: ${{ steps.github.outputs.image }}
          DOCKER_LOCAL_IMAGE_DH: ${{ steps.dockerhub.outputs.image }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: sebbo
          SENTRY_PROJECT: ble2mqtt
          SENTRY_URL: https://sentry.sebbo.net
      - name: 🔃 Merge main back into develop
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: everlytic/branch-merge@1.1.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          source_ref: 'main'
          target_branch: 'develop'
          commit_message_template: 'Merge branch {source_ref} into {target_branch} [skip ci]'
